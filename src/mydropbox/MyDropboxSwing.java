/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mydropbox;

import static controller.AddNodeTree.addNode;

import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import model.Constants;
import model.FileAttr;
import model.FileChange;
import model.FileCursor;
import model.FileStorage;
import model.XmlFactory;

import org.apache.commons.io.monitor.FileAlterationMonitor;
import org.apache.commons.io.monitor.FileAlterationObserver;
import org.restlet.ext.xml.DomRepresentation;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import service.AutoSyncService;
import service.DownloadService;
import controller.AppConfig;
import controller.FileWatcher;
import controller.LoginForm;
import controller.WriteXml;

/**
 *
 * @author Bunny
 */
public class MyDropboxSwing extends javax.swing.JFrame implements WindowListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	DefaultMutableTreeNode root;
	public static File url;
	public static String urls = "/home/nhuan/Dropbox";
	public static int userId;
	public static String tid;
	public static ArrayList<FileAttr> list;
	public static ArrayList<FileAttr> diffList;
	public static AppConfig property = new AppConfig();
	public static Properties prop;
	public static DomRepresentation dom;
	public static BlockingQueue<FileChange> lstCommit;
	public static FileAlterationMonitor watcher;
	public static String protocol;
	public static String address;
	public static String port;
	public static String tmpFolder;
	public static Thread timer;
	public static FileCursor cursor;
	public static String index;
	public static int countFileUpload = 0;
	public static int countFileDelete = 0;
	/**
	 * Creates new form MyDropboxSwing
	 */
	public MyDropboxSwing() {
		initComponents();
		loadFileConfig();
		addWindowListener(this);
		//this.add(new NewChangePanel());
		lstCommit = new LinkedBlockingQueue<FileChange>();
		timer = new Thread(new AutoSyncService());
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		sign_in = new javax.swing.JButton();
		log_out = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTree1 = new javax.swing.JTree(root);
		jProgressBar1 = new javax.swing.JProgressBar();
		sync = new javax.swing.JButton();
		username = new javax.swing.JTextField();
		password = new javax.swing.JPasswordField();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		reload = new javax.swing.JButton();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		jLabel3 = new javax.swing.JLabel();
		updatePanel = new javax.swing.JScrollPane();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("My Dropbox");

		sign_in.setText("Login");
		sign_in.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				sign_inActionPerformed(evt);
			}
		});

		log_out.setText("Logout");
		log_out.setEnabled(false);
		log_out.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				log_outActionPerformed(evt);
			}
		});

		jScrollPane1.setEnabled(false);

		jTree1.setEnabled(false);
		javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
		jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
		jScrollPane1.setViewportView(jTree1);

		jProgressBar1.setEnabled(false);

		sync.setEnabled(false);
		sync.setText("Sync");

		password.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				passwordActionPerformed(evt);
			}
		});

		jLabel1.setText("Username");

		jLabel2.setText("Password");

		reload.setEnabled(false);
		reload.setText("Reload");
		reload.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				reloadActionPerformed(evt);
			}
		});

		jTextArea1.setEnabled(false);
		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		jScrollPane2.setViewportView(jTextArea1);

		jLabel3.setText("History");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
				.addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(layout.createSequentialGroup()
														.addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGap(167, 167, 167)
														.addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(layout.createSequentialGroup()
																.addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(25, 25, 25)
																.addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(18, 18, 18)
																.addComponent(sign_in, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(18, 18, 18)
																.addComponent(log_out, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(46, 46, 46)
																.addComponent(reload, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(18, 18, 18)
																.addComponent(sync, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
																.addComponent(jLabel3))
																.addGap(39, 39, 39)
																.addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
																.addComponent(jScrollPane2)
																.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
																		.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
																				.addComponent(updatePanel, javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(jScrollPane1))
																				.addContainerGap())))
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel1)
												.addComponent(jLabel2))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(sign_in)
														.addComponent(log_out)
														.addComponent(reload, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(sync, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
														.addGroup(layout.createSequentialGroup()
																.addGap(34, 34, 34)
																.addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(18, 18, 18)
																.addComponent(updatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
																.addComponent(jLabel3)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(18, 18, 18))
				);

		updatePanel.getAccessibleContext().setAccessibleName("");

		setBounds(0, 0, 1018, 514);
	}// </editor-fold>//GEN-END:initComponents

	private void sign_inActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_sign_inActionPerformed

		list = new ArrayList<>();
		diffList = new ArrayList<>();
		sign_in.setEnabled(false);
		jScrollPane1.setEnabled(true);
		jTree1.setEnabled(true);
		sync.setEnabled(true);
		reload.setEnabled(true);
		jTextArea1.setEnabled(true);
		jProgressBar1.setEnabled(true);
		log_out.setEnabled(true);
		username.setEnabled(false);
		password.setEnabled(false);
		File file = new File(urls);
		//Kiem tra dang nhap
		DomRepresentation login = null;
		try {
			login = LoginForm.result(username.getText(), password.getText());
			if (login == null) {
				JOptionPane.showMessageDialog(null, "Retry to login");
				return;
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		//Load setting tu file


		userId = Integer.parseInt(login.getText("/User/UserId"));
		jTextArea1.setText(Integer.toString(userId));

		root = new DefaultMutableTreeNode("Root");
		DefaultTreeModel defaultTreeModel = new DefaultTreeModel(root);
		jTree1.setModel(defaultTreeModel);

		addNode(file, root);

		//Init observer
		FileAlterationObserver fao = new FileAlterationObserver(file);
		fao.addListener(new FileWatcher());
		watcher = new FileAlterationMonitor(2000);
		//Watch Dropbox folder
		watcher.addObserver(fao);
		System.out.println("Starting monitor. Ctrc - C to stop");
		try {
			//addAttr(urls);
			watcher.start();
		} catch (Exception ex) {
			Logger.getLogger(MyDropboxSwing.class.getName()).log(Level.SEVERE,
					null, ex);
		}
		
		loadXMLDoc();
		timer.start();
	}

	private void log_outActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_log_outActionPerformed
		// TODO add your handling code here:
		sign_in.setEnabled(true);
		log_out.setEnabled(false);
		jScrollPane1.setEnabled(false);
		jTree1.setEnabled(false);
		sync.setEnabled(false);
		jProgressBar1.setEnabled(false);
		username.setEnabled(true);
		password.setEnabled(true);
		jTextArea1.setText("");
		jTextArea1.setEnabled(false);
		reload.setEnabled(false);
		root = new DefaultMutableTreeNode("Root");
		root.removeAllChildren();
		DefaultTreeModel defaultTreeModel = new DefaultTreeModel(root);
		jTree1.setModel(defaultTreeModel);
	}// GEN-LAST:event_log_outActionPerformed

	private void passwordActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_passwordActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_passwordActionPerformed

	private void reloadActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_reloadActionPerformed
		// TODO add your handling code here:
		File file = new File(urls);

		root = new DefaultMutableTreeNode("Root");
		DefaultTreeModel defaultTreeModel = new DefaultTreeModel(root);
		jTree1.setModel(defaultTreeModel);

		addNode(file, root);
	}// GEN-LAST:event_reloadActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MyDropboxSwing.class.getName())
			.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MyDropboxSwing.class.getName())
			.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MyDropboxSwing.class.getName())
			.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MyDropboxSwing.class.getName())
			.log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MyDropboxSwing().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JProgressBar jProgressBar1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	public static javax.swing.JTextArea jTextArea1;
	public static javax.swing.JTree jTree1;
	private javax.swing.JButton log_out;
	private javax.swing.JPasswordField password;
	private javax.swing.JButton reload;
	private javax.swing.JButton sign_in;
	private javax.swing.JButton sync;
	private javax.swing.JScrollPane updatePanel;
	private javax.swing.JTextField username;
	// End of variables declaration//GEN-END:variables
	@Override
	public void windowActivated(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowClosed(WindowEvent e) {
		// TODO Auto-generated method stub
		System.out.println("Closed");
	}

	@Override
	public void windowClosing(WindowEvent e) {
		// TODO Auto-generated method stub
		XmlFactory xmlFactory = new XmlFactory(this.dom);
		try {
			Document doc = xmlFactory.dom.getDocument();
			xmlFactory.saveFileXml(doc);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		AppConfig config = new AppConfig();
		config.write("tid", Integer.toString(this.cursor.getTid()));
		config.write("index", Integer.toString(this.cursor.getIndex()));
	}

	@Override
	public void windowDeactivated(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowDeiconified(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowIconified(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowOpened(WindowEvent e) {
		// TODO Auto-generated method stub

	}
	public void loadXMLDoc()
	{
		if(cursor.getTid()*cursor.getIndex()==0)
		{

			DownloadService download = new DownloadService();
			XmlFactory xmlFactory = new XmlFactory();
			try {
				Document doc = download.getServer();
				xmlFactory.saveFileXml(doc, Constants.INDEXXML);
			} catch (IllegalStateException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		else 
		{
			File index = new File(Constants.INDEXXML);
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			//Load file index
			try {
				DocumentBuilder builder = factory.newDocumentBuilder();
				Document doc = builder.parse(index);
				dom = new DomRepresentation();
				dom.setDocument(doc);

			} catch (ParserConfigurationException | SAXException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			catch(IOException e)
			{
				DownloadService download = new DownloadService();
				try {
					Document doc = download.getServer();
					dom = new DomRepresentation();
					dom.setDocument(doc);
				} catch (IllegalStateException | IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			//Kiem tra thu muc moi, them cac file moi, file bi xoa vao list commit
			HashSet<FileStorage> hSet = new HashSet<FileStorage>();
			WriteXml.listFilesToSet(hSet,new File("/home/nhuan/Dropbox"));
		}
	}
	public void loadFileConfig()
	{
		prop = property.getProperties();
		this.tid = prop.getProperty("tid");
		this.protocol = prop.getProperty("protocol");
		this.address = prop.getProperty("address");
		this.port = prop.getProperty("port");
		this.urls = prop.getProperty("urls");
		this.tmpFolder = prop.getProperty("tmp");
		this.index = prop.getProperty("index");
		cursor= new FileCursor(this.tid,this.index);
	}
}
